# -*- coding: utf-8 -*-
"""22L-6721-6J-LabMid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ZVKtLaosiAnQ8lym3UM4Q9AswyZXgJX

<h2>Task: Implement a Two-Player Tic-Tac-Toe Game using the Min-Max Algorithm</h2>

<h3>Scenario:</h3>
<p>You are tasked with developing a Python program to simulate a two-player Tic-Tac-Toe game. The game should allow a human player to play against the computer. The computer should make optimal moves using the Min-Max algorithm.</p>

<h3>Note:</h3>
<p>You will be provided with some incomplete chunks of Python code. Several important functions and logic are missing. Your job is to complete the missing implementations properly based on the given code.</p>

<h3>Problem Details:</h3>
<ul>
  <li>The game board consists of 9 cells (3x3 grid).</li>
  <li>Two players take turns: one is the human (<strong>'X'</strong>), and the other is the computer (<strong>'O'</strong>).</li>
  <li>The goal is to place three marks in a horizontal, vertical, or diagonal row.</li>
  <li>The computer must always play optimally using the Min-Max algorithm.</li>
</ul>

<h3>Your Task:</h3>
<p>Write a Python program to implement the following:</p>

<ol>
  <li><strong>Game Board Representation:</strong>
    <ul><li>Use a 3x3 grid to represent the Tic-Tac-Toe board.</li>
    <li>Display the board after each move.</li></ul>
  </li>

  <li><strong>Human Move:</strong>
    <ul>
      <li>Allow the human player to select an empty cell (0-8) to place 'X'.</li>
      <li>Validate input to ensure the move is valid.</li>
    </ul>
  </li>

  <li><strong>Computer Move:</strong>
    <ul>
      <li>Implement the Min-Max algorithm to calculate the best move for the computer.</li>
      <li>Computer plays as 'O' and always tries to minimize the human's chances of winning.</li>
    </ul>
  </li>

  <li><strong>Win Condition Check:</strong>
    <ul>
      <li>After every move, check if there is a winner or if the game is a draw.</li>
    </ul>
  </li>

  <li><strong>Game Loop:</strong>
    <ul>
      <li>Continue the game until there is a winner or the board is full (draw).</li>
      <li>Print the result at the end (Human wins, Computer wins, or Draw).</li>
    </ul>
  </li>
</ol>

<h3>Submission Requirements:</h3>
<ul>
  <li>Submit the complete Python program with proper function definitions.</li>
  <li>Comment your code explaining each function and the Min-Max algorithm logic.</li>
</ul>

<h3>Bonus (Optional):</h3>
<ul>
  <li>Add alpha-beta pruning to optimize the Min-Max algorithm.</li>
  <li>Add a difficulty level for the computer (Easy, Medium, Hard).</li>
</ul>

<h3>Marking Criteria:</h3>
<table border="1" cellpadding="5">
  <tr><th>Component</th><th>Marks</th></tr>
  <tr><td>Game Board Display and Management</td><td>5</td></tr>
  <tr><td>Human Move Logic and Validation</td><td>4</td></tr>
  <tr><td>Min-Max Algorithm for Computer Move</td><td>8</td></tr>
  <tr><td>Win/Draw Detection and Game Flow</td><td>4</td></tr>
  <tr><td>Code Quality and Comments</td><td>4</td></tr>
  <tr><th>Total</th><th>25</th></tr>
</table>

<h3>Important Instructions:</h3>
<ul>
  <li>Your program should allow the human player to play multiple times.</li>
  <li>Ensure clear prompts and outputs for better user experience.</li>
  <li>Avoid using any AI libraries; the Min-Max logic should be implemented manually.</li>
</ul>
"""

import math

# Function to initialize the board
def initialize_board():
    return [' ' for _ in range(9)]

# Function that displays the board
def display_board(board):
    symbols = {'X': '❌', 'O': '⭕', ' ': ' '}
    print("\n    0   1   2")
    print("  -------------")
    for i in range(3):
        row = f"{i} |"
        for j in range(3):
            cell = board[i * 3 + j]
            display = symbols[cell] if cell in symbols else str(i * 3 + j)
            row += f" {display} |"
        print(row)
        print("  -------------")
    print("\n")

# Function to check if there is a winner
def is_winner(board, player):
    win_combinations = [
        (0,1,2), (3,4,5), (6,7,8),  # Rows
        (0,3,6), (1,4,7), (2,5,8),  # Columns
        (0,4,8), (2,4,6)            # Diagonals
    ]
    #Write the code to check if any player is winner

    # Loop through all poosible moves and check if same symbol
    for single in win_combinations:
      if board[single[0]] == board[single[1]] == board[single[2]] == player:
        return True

    return False

# Function to check if game is drawn or not
def is_draw(board):
  #write the code to check for draw on the board

  count = board.count(' ')
  # If there is a winner return false
  if is_winner(board, 'X') or is_winner(board, 'O'):
    return False
  # If there is still move space left
  elif count != 0:
    return False
  else:
    return True

# Function to get human move
def get_valid_human_move(board):
    while True:
        try:
            move = int(input("Enter your move (0-8): "))
            if 0 <= move <= 8 and board[move] == ' ':
                return move
            #write the condition to check if the move is  ot valid.
            else:
              print("Invalid input. Enter a number between 0 and 8.")
        except (ValueError, IndexError):
            print("Invalid input. Enter a number between 0 and 8.")

# Function to maximize the score
def maximize(board, depth):
    # Check for terminal condition
    if is_winner(board, 'O'):
        return 10 - depth
    if is_winner(board, 'X'):
        return depth - 10
    if is_draw(board):
        return 0

    best_score = -math.inf
    best_move = -1

    #Write the code to Maximize the move
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimize(board, depth+1)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i

    return best_score

# Function to minimize the score
def minimize(board, depth):
    # Check for the terminal conditions
    if is_winner(board, 'O'):
        return 10 - depth
    if is_winner(board, 'X'):
        return depth - 10
    if is_draw(board):
        return 0

    best_score = +math.inf
    best_move = -1

    #Write the code to minimize the move
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'X'
            score = maximize(board, depth+1)
            board[i] = ' '
            if score < best_score:
                best_score = score
                best_move = i
    return best_score

# Function to calculate best computer move
def get_computer_move(board):
    best_score = -math.inf
    best_move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimize(board, 0)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move

#Function that perfrom human move
def player_move(board):
    move = get_valid_human_move(board)
    board[move] = 'X'

#Function that perfrom computer move
def computer_play(board):
    #write the code to put computer mark 'O' on the board
    print("Computer is thinking!")
    move = get_computer_move(board)
    board[move] = 'O'
    print("Computer move: " + str(move))

#Function to check if game is over or not after every move
def check_game_over(board):
    #call the Winner and Draw fucntion and tell who won them game of=r its a draw

    flag = False
    if is_winner(board,'O'):
      flag = True
    elif is_winner(board,'X'):
      flag = True
    elif is_draw(board):
      flag = True

    return flag

def play_tic_tac_toe():
    board = initialize_board()
    print("Tic-Tac-Toe Game!\nYou are ❌ (X), Computer is ⭕ (O).")
    display_board(board)

    while True:
        player_move(board)
        if check_game_over(board):
            break
        display_board(board)

        computer_play(board)
        if check_game_over(board):
            break
        display_board(board)

    if is_winner(board, 'O'):
      print("Computer ⭕ wins the game!")
      display_board(board)
    elif is_winner(board, 'X'):
      print("You ❌ win the game!")
      display_board(board)
    else:
      print("Game drawn")
      display_board(board)

if __name__ == "__main__":
    while True:
      play_tic_tac_toe()
      print("Want to play again?")
      print("1- Play Again / 2- Exit")
      choice = int(input("Enter your choice: "))
      if choice != 1:
        break